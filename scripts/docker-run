#! /usr/bin/env python3

import argparse
import subprocess


def main():
    prog = 'docker-run'
    usage = 'docker-run [options] IMAGE [COMMAND] [ARG...]'

    p = argparse.ArgumentParser(prog=prog, usage=usage, description='',
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    current_directory = r'''`echo $(pwd)|sed 's/\///1;s/\//_/g'`'''

    p.add_argument('--name', default=current_directory, metavar='string', help='Assign a name to the container')
    p.add_argument('-p', metavar='string', help='Port', nargs='*')
    p.add_argument('--volumes-from', metavar='string', help='Mount volumes from the specified container(s)', nargs='*')
    p.add_argument('-w', '--workdir', default='/root/project', metavar='string',
                   help='Working directory inside the container')
    p.add_argument('-t', type=int, help='Container type, -1 for CPU, -2 for all gpus, 0 for gpu-0, 1 for gpu-1, etc.', required=True)
    p.add_argument('-z', type=int, default=0, choices=(0, 1),
                   help='Keep container or not, 1 for keeping, 0(default) not')
    p.add_argument('IMAGE', default='work:latest', nargs='?')
    p.add_argument('COMMAND', default='bash', nargs='?')
    p.add_argument('ARG', default='', nargs='?')

    opts = p.parse_args()

    name = opts.name
    port_mapping = opts.p
    volumes_from = opts.volumes_from
    workdir = opts.workdir
    container_type = opts.t
    keep_container = opts.z
    image = opts.IMAGE
    command = opts.COMMAND
    arg = opts.ARG

    if port_mapping is None:
        port_mapping_desp = ''
    elif len(port_mapping) == 1 and port_mapping[0] == 'P':
        port_mapping_desp = '-P'
    else:
        port_mapping_desp = ' '.join(['-p {0}'.format(p) for p in port_mapping])

    if volumes_from is None:
        volumes_from_desp = ''
    else:
        volumes_from_desp = ' '.join(['--volumes-from {0}'.format(v) for v in volumes_from])

    if container_type == -1:
        runtime_desp = ''
    elif container_type == -2:
        runtime_desp = '--runtime nvidia'
    else:
        runtime_desp = '--runtime nvidia -e CUDA_VISIBLE_DEVICES={0}'.format(container_type)

    if keep_container == 0:
        keep_container_desp = '--rm'
    else:
        keep_container_desp = ''

    cmd = 'docker run -it {1} {2} {4} -v $(pwd):{3} --name {0} {5} -w {3} {6} {7} {8}'.format(name, port_mapping_desp,
                                                                                              volumes_from_desp,
                                                                                              workdir,
                                                                                              keep_container_desp,
                                                                                              runtime_desp, image,
                                                                                              command,
                                                                                              arg)

    exit_code = subprocess.call(cmd, executable='/bin/bash', shell=True)
    return exit_code


if __name__ == '__main__':
    main()
