#! /usr/bin/env python3

import argparse
import subprocess


def main():
    prog = 'docker-run'
    usage = 'docker-run [options] IMAGE [COMMAND] [ARG...]'

    p = argparse.ArgumentParser(prog=prog, usage=usage, description='',
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    current_directory = r'''`echo $(pwd)|sed 's/\///1;s/\//_/g'`'''

    p.add_argument('--name', default=current_directory, metavar='string', help='Assign a name to the container')
    p.add_argument('--volumes-from', metavar='list', help='Mount volumes from the specified container(s)')
    p.add_argument('--runtime', default='nvidia', metavar='string', help='Runtime')
    p.add_argument('-w', '--workdir', default='/root/project', metavar='string',
                   help='Working directory inside the container')
    p.add_argument('IMAGE', default='work:latest', nargs='?')
    p.add_argument('COMMAND', default='bash', nargs='?')
    p.add_argument('ARG', default='', nargs='?')

    opts = p.parse_args()

    name = opts.name
    volumes_from = opts.volumes_from
    runtime = opts.runtime
    workdir = opts.workdir
    image = opts.IMAGE
    command = opts.COMMAND
    arg = opts.ARG

    if volumes_from is None:
        cmd = 'docker run -it --rm -v $(pwd):{3} --name {0} --runtime {2} -w {3} {4} {5} {6}'.format(name, volumes_from,
                                                                                                     runtime, workdir,
                                                                                                     image, command,
                                                                                                     arg)
    else:
        cmd = 'docker run -it --rm -v $(pwd):{3} --name {0} --runtime {2} --volumes-from {1} -w {3} {4} {5} {6}'.format(
            name, volumes_from,
            runtime, workdir,
            image, command, arg)

    exit_code = subprocess.call(cmd, executable='/bin/bash', shell=True)
    return exit_code


if __name__ == '__main__':
    main()
